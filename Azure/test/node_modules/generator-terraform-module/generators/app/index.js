'use strict';

var packageJson = require('../../package.json');
var yeoman = require('yeoman-generator');
var chalk = require('chalk');
var md5File = require('md5-file');

var generator = {
  name: packageJson.name.replace('generator-', ''),
  templateVersion: packageJson.config.generator.templateVersion
};

var generatorNotice = 'This file was generated by `yo ' + generator.name + '`';
var templateHashNotice = 'using template v' + generator.templateVersion + ', hash: ';

module.exports = yeoman.Base.extend({

  initializing: function() {
    this.directoryPrefix = 'terraform-module-';
    this.generatorNotice = generatorNotice;
    this.templateHashNotice = templateHashNotice;
    this.summaryString = 'The module creates';
    this.descriptionString = ' This repository is a Terraform Module for'
    this.descriptionStringMd = 'This repository is a [Terraform](https://terraform.io/) Module for'
  },

  prompting: function() {

    // header
    this.log(chalk.gray('Starting Generator v' + packageJson.version));
    this.log();
    this.log(chalk.red('    __     __                                        '));
    this.log(chalk.red('    \\ \\   / /                                      '));
    this.log(chalk.red('     \\ \\_/ /__  ___  _ __ ___   __ _ _ __          '));
    this.log(chalk.red('      \\   / _ \\/ _ \\| \'_ ` _ \\ / _` | \'_ \\    '));
    this.log(chalk.red('       | |  __/ (_) | | | | | | (_| | | | |          '));
    this.log(chalk.red('       |_|\\___|\\___/|_| |_| |_|\\__,_|_| |_|       '));
    this.log();
    this.log(chalk.white('       ' + packageJson.description));
    this.log();

    var prompts = [
      {
        type: 'input',
        name: 'userName',
        message: 'What is your full name',
        default: 'Jane Operator',
        store: true
      }, {
        type: 'input',
        name: 'userEmail',
        message: 'What is your email address',
        default: 'noreply@example.com',
        store: true
      }, {
        type: 'input',
        name: 'moduleName',
        message: 'What is the module\'s name',
        default: 'my-module'
      }, {
        type: 'input',
        name: 'moduleSummary',
        message: 'Finish this sentence:\n  ' + this.summaryString,
        default: 'a Foo resource.'
      }, {
        type: 'input',
        name: 'moduleDescription',
        message: 'Finish this sentence:\n  ' + this.descriptionString,
        default: 'managing Foo resources.'
      }, {
        type: 'confirm',
        name: 'versionConstraintSupport',
        message: 'Would you like to add support for a Terraform version-constraint?',
        store: true
      }, {
        type: 'input',
        name: 'versionConstraintString',
        message: 'Enter a version-constraint string, such as:\n  * "< 1.0.0"\n  * "> 0.7.0, < 0.8.0"\n  * "~> 0.9"\n',
        default: '> 0.8.0',
        when: function (response) {
          return response.versionConstraintSupport;
        },
      }, {
        type: 'confirm',
        name: 'releaseItSupport',
        message: 'Would you like to add "Release It!" support?',
        store: true
      },
    ];

    return this.prompt(prompts).then(function(props) {
      // make user inputs globally available
      this.props = props;
    }.bind(this));
  },

  writing: function() {
    this.prefix = this.directoryPrefix + this.props.moduleName + '/';
    this.md5Hashes = {
      'README.md': md5File.sync(this.templatePath('README.md')),
      'main.tf': md5File.sync(this.templatePath('main.tf')),
      'meta.tf': md5File.sync(this.templatePath('meta.tf')),
      'output.tf': md5File.sync(this.templatePath('output.tf')),
      'variables.tf': md5File.sync(this.templatePath('variables.tf'))
    };

    this.fs.copy(
      this.templatePath('editorconfig'),
      this.destinationPath(this.prefix + '.editorconfig')
    );

    this.fs.copy(
      this.templatePath('gitignore'),
      this.destinationPath(this.prefix + '.gitignore')
    );

    if (this.props.releaseItSupport) {
      this.fs.copy(
        this.templatePath('release.json'),
        this.destinationPath(this.prefix + '.release.json')
      );
    }

    this.fs.copyTpl(
      this.templatePath('README.md'),
      this.destinationPath(this.prefix + 'README.md'),
      {
        moduleName: this.props.moduleName,
        moduleSummary: this.summaryString + ' ' + this.props.moduleSummary,
        moduleDescription: this.descriptionStringMd + ' ' + this.props.moduleDescription,
        generatorNotice: this.generatorNotice,
        templateHashNotice: this.templateHashNotice + this.md5Hashes['README.md'] + ')'
      }
    );

    this.fs.copyTpl(
      this.templatePath('main.tf'),
      this.destinationPath(this.prefix + 'main.tf'),
      {
        generatorNotice: this.generatorNotice,
        templateHashNotice: this.templateHashNotice + this.md5Hashes['main.tf'] + ')'
      }
    );

    if (this.props.versionConstraintSupport && this.props.versionConstraintString != '') {
      this.fs.copyTpl(
        this.templatePath('meta.tf'),
        this.destinationPath(this.prefix + 'meta.tf'),
        {
          generatorNotice: this.generatorNotice,
          templateHashNotice: this.templateHashNotice + this.md5Hashes['variables.tf'] + ')',
          versionConstraintString: this.versionConstraintString
        }
      );
    }

    this.fs.copyTpl(
      this.templatePath('output.tf'),
      this.destinationPath(this.prefix + 'output.tf'),
      {
        generatorNotice: this.generatorNotice,
        templateHashNotice: this.templateHashNotice + this.md5Hashes['output.tf'] + ')'
      }
    );

    this.fs.copyTpl(
      this.templatePath('variables.tf'),
      this.destinationPath(this.prefix + 'variables.tf'),
      {
        generatorNotice: this.generatorNotice,
        templateHashNotice: this.templateHashNotice + this.md5Hashes['variables.tf'] + ')'
      }
    );
  },

  install: function() {
    this.log();
    this.log(chalk.green('All done!'));
    this.log();
  }
});
